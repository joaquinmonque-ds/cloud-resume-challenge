AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge

# ==============================
# GLOBAL SETTINGS
# ==============================
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON

# ==============================
# RESOURCES
# ==============================
Resources:
  # ------------------------------
  # S3 Bucket for static website hosting
  # ------------------------------
  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: joaquin-monque-resume-challenge-website
      WebsiteConfiguration:
        IndexDocument: index.html

  # ------------------------------
  # DynamoDB table to track visitor count
  # ------------------------------
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"

  # ------------------------------
  # CloudFront distribution for CDN
  # ------------------------------
  MyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - DomainName: joaquin-monque-resume-challenge-website.s3-website-us-east-1.amazonaws.com
            Id: S3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: false
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0

  # ------------------------------
  # Public read policy for S3 website bucket
  # ------------------------------
  MyWebsitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyWebsite
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${MyWebsite.Arn}/*"

  # ------------------------------
  # Explicit API Gateway with CORS
  # ------------------------------
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # ------------------------------
  # Lambda function: GET visitor count
  # ------------------------------
  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-function/
      Handler: get_function.lambda_handler # app.py with lambda_handler inside
      Runtime: python3.13
      Architectures:
        - x86_64
      Policies:
        - DynamoDBReadPolicy:
            TableName: cloud-resume-challenge
      Events:
        GetCount:
          Type: Api
          Properties:
            Path: /get
            Method: GET
            RestApiId: !Ref MyApi
      Environment:
        Variables:
          PARAM1: VALUE

  # ------------------------------
  # Lambda function: PUT (increment visitor count)
  # ------------------------------
  PutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put-function/
      Handler: put_function.lambda_handler # put_function.py with lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: cloud-resume-challenge
      Events:
        PutCount:
          Type: Api
          Properties:
            Path: /put
            Method: POST
            RestApiId: !Ref MyApi
      Environment:
        Variables:
          PARAM1: VALUE

  # ------------------------------
  # Application Insights for monitoring
  # ------------------------------
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

# ==============================
# OUTPUTS
# ==============================
Outputs:
  GetFunctionAPI:
    Description: API Gateway endpoint URL for GET (visitor counter)
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get"

  GetFunction:
    Description: GET Lambda Function ARN
    Value: !GetAtt GetFunction.Arn

  GetFunctionIamRole:
    Description: IAM Role created for GetFunction
    Value: !GetAtt GetFunctionRole.Arn

  PutFunctionAPI:
    Description: API Gateway endpoint URL for PUT (increment visitor counter)
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/put"

  PutFunction:
    Description: PUT Lambda Function ARN
    Value: !GetAtt PutFunction.Arn

  PutFunctionIamRole:
    Description: IAM Role created for PutFunction
    Value: !GetAtt PutFunctionRole.Arn
